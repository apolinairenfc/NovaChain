"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const RN = __importStar(require("react-native"));
const styleSheet = RN.StyleSheet.create({
    view: {
        flexGrow: 1,
        flexShrink: 1,
        flexBasis: 'auto',
        alignItems: 'center',
        ...(RN.Platform.OS === 'web'
            ? {
                cursor: 'pointer',
                // This is for web
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                userSelect: 'none'
            }
            : {})
    },
    row: {
        flexDirection: 'row'
    },
    rowReverse: {
        flexDirection: 'row-reverse'
    },
    column: {
        flexDirection: 'column'
    },
    columnReverse: {
        flexDirection: 'column-reverse'
    }
});
const SliderView = react_1.default.forwardRef(({ vertical, inverted, style, ...props }, ref) => {
    const isVertical = react_1.default.useMemo(() => vertical || (style && (RN.StyleSheet.flatten(style).flexDirection || '').startsWith('column')), [vertical, style]);
    const containerStyle = react_1.default.useMemo(() => ([
        styleSheet.view,
        styleSheet[(isVertical ? 'column' : 'row') + (inverted ? 'Reverse' : '')],
        style
    ]), [style, isVertical, inverted]);
    return react_1.default.createElement(RN.View, { ...props, ref: ref, style: containerStyle });
});
SliderView.displayName = 'SliderView';
exports.default = react_1.default.memo(SliderView);
